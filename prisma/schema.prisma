generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @map("_id")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  address      String        @unique
  revenue      Boolean
  wagers       Wager[]
  transactions Transactions[]
}

model Sport {
  id          String        @id @default(uuid())
  name        String
  predictions Prediction[]
  wagers      Wager[]
}

model Prediction {
  id            String   @id @default(uuid())
  playerName    String
  team          String
  position      String
  statType      String
  statValue     Int
  weekOpponent  String
  gameTime      DateTime
  predictionOn  Boolean
  locked        Boolean  @default(false)
  sportId       String   
  sport         Sport    @relation(fields: [sportId], references: [id])
  statOutcomes  StatOutcome[]
}

model Wager {
  id            String        @id
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  amount        Int
  token         String
  multiplier    Int
  playerName    String
  statType      String
  statValue     Int
  gameTime      DateTime
  more          Boolean
  less          Boolean
  startDate     DateTime
  payoutTime    DateTime
  sportId       String
  sport         Sport         @relation(fields: [sportId], references: [id])
  statOutcomes  StatOutcome[]
  transactions  Transactions[]
}

model Transactions {
  id      String @id
  wagerId String
  userId  String
  wager   Wager @relation(fields: [wagerId], references: [id])
  user    User  @relation(fields: [userId], references: [id])
}

model StatOutcome {
  id            String     @id
  predictionId  String
  wagerId       String
  outcomeType   String
  outcomeValue  Int
  multiplier    Int
  payout        Boolean
  prediction    Prediction @relation(fields: [predictionId], references: [id])
  wager         Wager      @relation(fields: [wagerId], references: [id])
}

model LitProtocolMessage {
  id                      String   @id @default(uuid()) @map("_id")
  encryptedString         String
  accessControlConditions Json[]
  encryptedSymmetricKey   String
}
